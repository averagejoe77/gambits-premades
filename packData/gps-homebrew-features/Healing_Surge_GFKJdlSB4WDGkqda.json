{
  "name": "Healing Surge",
  "type": "feat",
  "img": "icons/magic/life/crosses-trio-red.webp",
  "system": {
    "description": {
      "value": "<p><em>Requires Midi QOL, DAE</em></p><p>A creature you touch can immediately expend one of its Hit Dice to regain a number of hit points equal to its Hit Die roll + its Constitution modifier + your Intelligence modifier.</p>",
      "chat": ""
    },
    "source": {
      "custom": "2.1.18",
      "revision": 1,
      "rules": "2014",
      "book": "",
      "page": "",
      "license": ""
    },
    "cover": null,
    "crewed": false,
    "uses": {
      "max": "",
      "recovery": [],
      "spent": 0
    },
    "type": {
      "value": "feat",
      "subtype": ""
    },
    "requirements": "",
    "activities": {
      "dnd5eactivity000": {
        "_id": "dnd5eactivity000",
        "type": "utility",
        "activation": {
          "type": "action",
          "value": 1,
          "condition": "",
          "override": false
        },
        "consumption": {
          "targets": [],
          "scaling": {
            "allowed": false,
            "max": ""
          },
          "spellSlot": true
        },
        "description": {
          "chatFlavor": ""
        },
        "duration": {
          "concentration": false,
          "value": "",
          "units": "inst",
          "special": "",
          "override": false
        },
        "effects": [],
        "range": {
          "value": "30",
          "units": "touch",
          "special": "",
          "override": false
        },
        "target": {
          "template": {
            "count": "",
            "contiguous": false,
            "type": "",
            "size": "",
            "width": "",
            "height": "",
            "units": "m"
          },
          "affects": {
            "count": "1",
            "type": "ally",
            "choice": false,
            "special": ""
          },
          "prompt": true,
          "override": false
        },
        "uses": {
          "spent": 0,
          "max": "",
          "recovery": []
        },
        "roll": {
          "formula": "",
          "name": "",
          "prompt": false,
          "visible": false
        },
        "sort": 0,
        "useConditionText": "",
        "useConditionReason": "",
        "effectConditionText": "",
        "macroData": {
          "name": "",
          "command": ""
        },
        "ignoreTraits": {
          "idi": false,
          "idr": false,
          "idv": false,
          "ida": false,
          "idm": false
        },
        "midiProperties": {
          "ignoreTraits": [],
          "triggeredActivityId": "none",
          "triggeredActivityConditionText": "",
          "triggeredActivityTargets": "targets",
          "triggeredActivityRollAs": "self",
          "autoConsume": false,
          "forceConsumeDialog": "default",
          "forceRollDialog": "default",
          "forceDamageDialog": "default",
          "confirmTargets": "default",
          "autoTargetType": "any",
          "autoTargetAction": "default",
          "automationOnly": false,
          "otherActivityCompatible": true,
          "otherActivityAsParentType": true,
          "identifier": "",
          "displayActivityName": false,
          "rollMode": "default",
          "chooseEffects": false,
          "toggleEffect": false,
          "ignoreFullCover": false,
          "removeChatButtons": "default",
          "magicEffect": false,
          "magicDamage": false,
          "noConcentrationCheck": false,
          "autoCEEffects": "default"
        },
        "isOverTimeFlag": false,
        "overTimeProperties": {
          "saveRemoves": true,
          "preRemoveConditionText": "",
          "postRemoveConditionText": ""
        },
        "otherActivityId": "none",
        "otherActivityAsParentType": true
      }
    },
    "identifier": "healing-surge",
    "enchant": {},
    "prerequisites": {
      "level": null,
      "items": [],
      "repeatable": false
    },
    "properties": [],
    "advancement": []
  },
  "effects": [],
  "folder": null,
  "flags": {
    "scene-packer": {
      "hash": "b2b275ea4eec57949eb019038f9293d48fb8184a",
      "sourceId": "Item.2O9Pa22WvNcXYxRL"
    },
    "dae": {
      "macro": {
        "name": "Healing Surge",
        "img": "icons/magic/life/crosses-trio-red.webp",
        "type": "script",
        "scope": "global",
        "command": "const target = workflow.targets.first();\nif (!target) return ui.notifications.warn(\"No target selected.\");\n\nactor = target.actor;\nconst actorClasses = actor.classes ?? {};\nconst classKeys = Object.keys(actorClasses);\n\nlet totalHitDiceSelected = 0;\n\nconst totalHitDice = classKeys.reduce((acc, key) => {\n  const cls = actorClasses[key];\n  const levels = parseInt(cls.system.levels) || 0;\n  const spent  = parseInt(cls.system.hd?.spent) || 0;\n  return acc + Math.max(levels - spent, 0);\n}, 0);\n\nif (totalHitDice === 0) {\n  return ui.notifications.warn(\"You have no hit dice remaining.\");\n}\n\nlet content = `<p>Select the number of hit dice to use:</p><form>`;\nfor (const key of classKeys) {\n  const cls = actorClasses[key];\n  const levels = parseInt(cls.system.levels) || 0;\n  const spent  = parseInt(cls.system.hd?.spent) || 0;\n  const hitDiceAvailable = Math.max(levels - spent, 0);\n  if (hitDiceAvailable === 0) continue;\n\n  const denom = cls.system.hd?.denomination ?? \"d8\";\n  const dieLabel = String(denom).startsWith(\"d\") ? String(denom) : `d${denom}`;\n\n  content += `\n  <div class=\"form-group\">\n    <label style=\"flex: 0 0 auto; margin: 0 10px; text-align: left;\">\n      ${cls.name} - Available: <b>${hitDiceAvailable}${dieLabel}</b>\n    </label>\n    <div class=\"form-fields\">\n      <button type=\"button\" class=\"hit-dice-decrement\" data-key=\"${key}\">-</button>\n      <span id=\"hitDiceDisplay-${key}\" style=\"flex: 0 0 auto; margin: 0 10px; text-align: center;\">0</span>\n      <button type=\"button\" class=\"hit-dice-increment\" data-key=\"${key}\">+</button>\n    </div>\n  </div>`;\n}\ncontent += `</form>`;\n\nawait foundry.applications.api.DialogV2.wait({\n  window: { title: `Use Hit Dice` },\n  content,\n  buttons: [\n    {\n      action: \"continue\",\n      label: \"Continue\",\n      callback: async (event, _button, dialog) => {\n        for (const key of classKeys) {\n            const display = dialog.element.querySelector(`#hitDiceDisplay-${key}`);\n            if (!display) continue;\n\n            const hitDiceToUse = parseInt(display?.textContent ?? \"0\");\n            const hitDiceRollType = actorClasses[key].system.hd.denomination;\n            \n            if (!hitDiceToUse || hitDiceToUse === 0) {\n                continue;\n            }\n\n            for (let i = 0; i < hitDiceToUse; i++) {\n                await actor.rollHitDie({ denomination: hitDiceRollType });\n            }\n        }\n      }\n    },\n    { action: \"cancel\", label: \"Cancel\", callback: () => false }\n  ],\n  default: \"cancel\",\n  render: (event) => {\n    const root = event.target?.element;\n    if (!root) return;\n\n    root.addEventListener('click', ev => {\n      const t = ev.target;\n      const isInc = t.classList.contains('hit-dice-increment');\n      const isDec = t.classList.contains('hit-dice-decrement');\n      if (!isInc && !isDec) return;\n\n      const key = t.dataset.key;\n      const span = root.querySelector(`#hitDiceDisplay-${key}`);\n      if (!span) return;\n\n      let currentValue = parseInt(span.textContent) || 0;\n\n      if (isInc) {\n        if (totalHitDiceSelected < 1) {\n          span.textContent = String(currentValue + 1);\n          totalHitDiceSelected++;\n        }\n      } else if (isDec && currentValue > 0) {\n        span.textContent = String(currentValue - 1);\n        totalHitDiceSelected--;\n      }\n    });\n  }\n});",
        "author": "roRDywD19pu2VxlC",
        "ownership": {
          "default": 3
        },
        "_id": null,
        "folder": null,
        "sort": 0,
        "flags": {},
        "_stats": {
          "systemId": "dnd5e",
          "systemVersion": "5.1.9",
          "coreVersion": "13.348",
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null,
          "compendiumSource": null,
          "duplicateSource": null,
          "exportSource": null
        }
      }
    },
    "core": {},
    "character-actions-list-5e": {
      "filter-override": true
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": "",
      "removeAttackDamageButtons": "default",
      "reactionCondition": "",
      "otherCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "rollOther": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "noConcentrationCheck": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "confirmTargets": "never"
    },
    "LocknKey": {
      "IDKeysFlag": "",
      "RemoveKeyonUseFlag": false,
      "LPFormulaFlag": "",
      "LPFormulaOverrideFlag": false,
      "LBFormulaFlag": "",
      "LBFormulaOverrideFlag": false,
      "ReplacementItemFlag": ""
    },
    "walledtemplates": {
      "wallsBlock": "globalDefault",
      "wallRestriction": "globalDefault"
    },
    "dnd5e": {
      "riders": {
        "activity": [],
        "effect": []
      }
    }
  },
  "_id": "GFKJdlSB4WDGkqda",
  "_key": "!items!GFKJdlSB4WDGkqda"
}
